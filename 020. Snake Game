# main.py

from turtle import Screen
from snake import Snake
from food import Food
from scoreboard import Scoreboard
import time
MINDISTANCE = 15
MINTAILDIST = 10
MAXBOUND = 280
MINBOUND = -280

# set up the screen for snake game
screen = Screen()
screen.setup(width=600, height=600)
screen.bgcolor('black')
screen.title('Snake')
screen.tracer(0)

# create object for snake on screen
snake = Snake()
# create object for food on screen
food = Food()
# create object for score on screen
score = Scoreboard()

# set arrow key bindings to control snake
screen.listen()
screen.onkey(snake.up, "Up")
screen.onkey(snake.down, "Down")
screen.onkey(snake.left, "Left")
screen.onkey(snake.right, "Right")
screen.onkey(score.end_game, "q")

while not score.game_is_over:
    screen.update()
    time.sleep(0.1)
    snake.move()

    # Detect collision with food and update score
    if snake.head.distance(food) < MINDISTANCE:
        food.refresh()
        snake.extend()
        score.update()

    # Detect collision with wall
    if snake.head.xcor() > MAXBOUND or snake.head.xcor() < MINBOUND or snake.head.ycor() > MAXBOUND \
            or snake.head.ycor() < MINBOUND:
        score.reset()
        snake.reset()
        # game_is_on = False
        # score.game_over()

    # Detect collision with tail, use slicing to avoid checking head against itself
    for segment in snake.segments[1:]:
        if snake.head.distance(segment) < MINTAILDIST:
            score.reset()
            snake.reset()
            # game_is_on = False
            # score.game_over()

screen.exitonclick()

# scoreboard.py

from turtle import Turtle
HEIGHT = 265
ALIGNMENT = 'center'
FONT = ('Courier', 16, 'normal')


class Scoreboard(Turtle):
    def __init__(self):
        """initialize scoreboard"""
        super().__init__()
        self.game_is_over = False
        self.score = -1             # set to -1 so first time it writes 0 in update function
        with open("data.txt") as score_data:
            self.high_score = int(score_data.read())
        self.color('white')
        self.hideturtle()
        self.penup()
        self.goto(0, HEIGHT)
        self.update()

    def update(self):
        """updates scoreboard"""
        self.clear()
        self.score += 1
        self.write(f"Score: {self.score} High Score: {self.high_score}", align=ALIGNMENT, font=FONT)
        with open("data.txt", mode="w") as score_data:
            score_data.write(str(self.high_score))

    def reset(self):
        """resets game and updates high score"""
        if self.score > self.high_score:
            self.high_score = self.score
        self.score = -1
        self.update()

    def end_game(self):
        """ends the game"""
        self.game_is_over = True

# food.py

from turtle import Turtle
from random import randint
COORDMIN = -280
COORDMAX = 280


class Food(Turtle):
    def __init__(self):
        """initialize the food"""
        super().__init__()
        self.shape('circle')
        self.penup()
        self.shapesize(stretch_len=0.5, stretch_wid=0.5)
        self.color('blue')
        self.speed('fastest')
        self.refresh()

    def refresh(self):
        """update location of food"""
        random_x = randint(COORDMIN, COORDMAX)
        random_y = randint(COORDMIN, COORDMAX)
        self.goto(random_x, random_y)

# snake.py

from turtle import Turtle
MOVE_DISTANCE = 20
STARTING_POSITIONS = [(0, 0), (-20, 0), (-40, 0)]
UP = 90
DOWN = 270
LEFT = 180
RIGHT = 0
HIDECOORD = (-1000, 1000)


class Snake:
    def __init__(self):
        """initialize the snake"""
        self.segments = []
        self.create_snake()
        self.head = self.segments[0]

    def create_snake(self):
        """create the snake body"""
        for position in STARTING_POSITIONS:
            self.add_segment(position)

    def add_segment(self, position):
        """adds a new segment to the snake"""
        segment = Turtle(shape='square')
        segment.color('white')
        segment.penup()
        segment.goto(position)
        self.segments.append(segment)

    def extend(self):
        """extends the snake when it eats food"""
        self.add_segment(self.segments[-1].position())

    def move(self):
        """move the snake by moving each segment to the position of the preceding segment, then moving the first
        segment to a new position, then repeating as needed to reflect snake moving on screen"""
        for seg_num in range(len(self.segments) - 1, 0, -1):
            new_x = self.segments[seg_num - 1].xcor()
            new_y = self.segments[seg_num - 1].ycor()
            self.segments[seg_num].goto(new_x, new_y)
        self.segments[0].forward(MOVE_DISTANCE)

    def reset(self):
        for seg in self.segments:
            seg.goto(HIDECOORD)
        self.segments.clear()
        self.create_snake()
        self.head = self.segments[0]

    def up(self):
        """change snake heading to up"""
        if self.head.heading() != DOWN:
            self.head.setheading(UP)

    def down(self):
        """change snake heading to down"""
        if self.head.heading() != UP:
            self.head.setheading(DOWN)

    def left(self):
        """change snake heading to left"""
        if self.head.heading() != RIGHT:
            self.head.setheading(LEFT)

    def right(self):
        """change snake heading to right"""
        if self.head.heading() != LEFT:
            self.head.setheading(RIGHT)


# main.py

from data_manager import DataManager
from flight_search import FlightSearch
from notification_manager import NotificationManager

# set up objects to be used for flight searches
data_manager = DataManager()
flight_search = FlightSearch()
notification_manager = NotificationManager()

# Departure city code, could be added to spreadsheet instead
DEPARTURE_CITY = "LON"

# Gets new users
print("Welcome to Chris's Flight Club.\n"
      "We find the best flight deals and email you.")
is_new_user = input("Are you a new user? ")
if is_new_user == 'y':
    first_name = input("What is your first name? ")
    last_name = input("What is your last name? ")
    emails_match = False
    while not emails_match:
        email1 = input("What is your email? ")
        email2 = input("Type your email again. ")
        if email1 == email2:
            emails_match = True
            print("You're in the club!")
        else:
            print("Emails don't match. Try again!")

    data_manager.add_new_user(first_name, last_name, email1)

# gets data of cities and prices from Google Sheet
sheet_data = data_manager.get_destination_data()
num_cities = len(sheet_data)

# fills in city IATA code if missing
for index in range(num_cities):
    if not sheet_data[index]['iataCode']:
        sheet_data[index]['iataCode'] = flight_search.get_city_code(sheet_data[index]['city'])
        data_manager.update_destination_codes()

# searches for cheap flights to each city in Google Sheet document
# sends a message if new deal found
for index in range(num_cities):
    arrival_city = sheet_data[index]['iataCode']
    cheap_flights = flight_search.search_for_flights(DEPARTURE_CITY, arrival_city)
    if cheap_flights is None:
        continue
    else:
        if sheet_data[index]['lowestPrice'] > cheap_flights.price:
            # notification_manager.send_message(cheap_flights)
            notification_manager.send_email(cheap_flights)

# notification_manager.py

from data_manager import DataManager
from flight_search import FlightSearch
from notification_manager import NotificationManager

# set up objects to be used for flight searches
data_manager = DataManager()
flight_search = FlightSearch()
notification_manager = NotificationManager()

# Departure city code, could be added to spreadsheet instead
DEPARTURE_CITY = "LON"

# Gets new users
print("Welcome to Chris's Flight Club.\n"
      "We find the best flight deals and email you.")
is_new_user = input("Are you a new user? ")
if is_new_user == 'y':
    first_name = input("What is your first name? ")
    last_name = input("What is your last name? ")
    emails_match = False
    while not emails_match:
        email1 = input("What is your email? ")
        email2 = input("Type your email again. ")
        if email1 == email2:
            emails_match = True
            print("You're in the club!")
        else:
            print("Emails don't match. Try again!")

    data_manager.add_new_user(first_name, last_name, email1)

# gets data of cities and prices from Google Sheet
sheet_data = data_manager.get_destination_data()
num_cities = len(sheet_data)

# fills in city IATA code if missing
for index in range(num_cities):
    if not sheet_data[index]['iataCode']:
        sheet_data[index]['iataCode'] = flight_search.get_city_code(sheet_data[index]['city'])
        data_manager.update_destination_codes()

# searches for cheap flights to each city in Google Sheet document
# sends a message if new deal found
for index in range(num_cities):
    arrival_city = sheet_data[index]['iataCode']
    cheap_flights = flight_search.search_for_flights(DEPARTURE_CITY, arrival_city)
    if cheap_flights is None:
        continue
    else:
        if sheet_data[index]['lowestPrice'] > cheap_flights.price:
            # notification_manager.send_message(cheap_flights)
            notification_manager.send_email(cheap_flights)

# flight_data.py

class FlightData:
    # This class is responsible for structuring the flight data.
    def __init__(self, price, departure_code, departure_city, departure_date,
                 arrival_code, arrival_city, return_date, depart_airline, return_airline,
                 stop_overs=0, via_city="", via_city2=""):
        self.price = price
        self.departure_code = departure_code
        self.departure_city = departure_city
        self.departure_date = departure_date
        self.arrival_code = arrival_code
        self.return_date = return_date
        self.arrival_city = arrival_city
        self.depart_airline = depart_airline
        self.return_airline = return_airline
        self.stop_overs = stop_overs
        self.via_city = via_city
        self.via_city2 = via_city2

# flight_search.py

import requests
import os
from datetime import datetime, timedelta
from flight_data import FlightData


class FlightSearch:
    # This class is responsible for talking to the Flight Search API.
    def __init__(self):
        self.TEQUILA_ENDPOINT = "https://tequila-api.kiwi.com"
        self.TEQUILA_API_KEY = os.environ['TEQUILA_API_KEY']

        self.kiwi_endpoint = "https://tequila-api.kiwi.com/locations/query"
        self.kiwi_params = {
            "term": "",
            "location_types": "city",
        }
        self.kiwi_headers = {
            "apikey": "M8ArhNGUduHYY-Wyh4QgCqCUmgl6Uv4m",
        }

        self.flight_search_ep = "https://api.tequila.kiwi.com/v2/search"
        self.flight_search_params = {
            "fly_from": "",
            "fly_to": "",
            "date_from": "",
            "date_to": "",
            "nights_in_dst_from": 7,
            "nights_in_dst_to": 28,
            "curr": "GBP",
            "one_for_city": 1,
            "max_stopovers": 0,
        }
        self.flight_search_headers = self.kiwi_headers

    def get_city_code(self, city_name):
        """Gets the corresponding city IATA code for a given city name"""
        self.kiwi_params['term'] = city_name
        response = requests.get(
            url=self.kiwi_endpoint,
            params=self.kiwi_params,
            headers=self.kiwi_headers)
        response.raise_for_status()
        result = response.json()
        print(result)
        code = result['locations'][0]['code']
        return code

    def search_for_flights(self, departure_code, arrival_code):
        """Searches for the cheapest flight in a given date range between a given city pair"""
        """current date range is from tomorrow to six months from now"""
        self.flight_search_params['fly_from'] = departure_code
        self.flight_search_params['fly_to'] = arrival_code
        tomorrow = datetime.now() + timedelta(days=1)
        min_date = f"{tomorrow.strftime('%d')}/{tomorrow.strftime('%m')}/{tomorrow.strftime('%Y')}"
        self.flight_search_params["date_from"] = min_date
        six_month = tomorrow + timedelta(days=180)
        max_date = f"{six_month.strftime('%d')}/{six_month.strftime('%m')}/{six_month.strftime('%Y')}"
        self.flight_search_params["date_to"] = max_date
        response = requests.get(
            url=self.flight_search_ep,
            params=self.flight_search_params,
            headers=self.flight_search_headers)
        response.raise_for_status()
        result = response.json()
        try:
            # checks for non-stop flights
            flight_data = FlightData(
                price=result['data'][0]['price'],
                departure_code=result['data'][0]['flyFrom'],
                departure_city=result['data'][0]['cityFrom'],
                departure_date=result['data'][0]['route'][0]['local_arrival'].split('T')[0],
                arrival_code=result['data'][0]['flyTo'],
                return_date=result['data'][0]['route'][1]['local_arrival'].split('T')[0],
                arrival_city=result['data'][0]['cityTo'],
                depart_airline=result['data'][0]['route'][0]['airline'],
                return_airline=result['data'][0]['route'][1]['airline']
            )
        except IndexError:
            # This code executes if no non-stop flight is found
            self.flight_search_params['max_stopovers'] = 2
            response = requests.get(
                url=self.flight_search_ep,
                params=self.flight_search_params,
                headers=self.flight_search_headers)
            response.raise_for_status()
            result = response.json()
            flight_data = FlightData(
                price=result['data'][0]['price'],
                departure_code=result['data'][0]['flyFrom'],
                departure_city=result['data'][0]['cityFrom'],
                departure_date=result['data'][0]['route'][0]['local_arrival'].split('T')[0],
                depart_airline=result['data'][0]['route'][0]['airline'],
                arrival_code=result['data'][0]['flyTo'],
                return_date=result['data'][0]['route'][2]['local_arrival'].split('T')[0],
                arrival_city=result['data'][0]['cityTo'],
                return_airline=result['data'][0]['route'][2]['airline'],
                stop_overs=1,
                via_city=result['data'][0]['route'][0]['cityTo'],
                via_city2=result['data'][0]['route'][2]['cityTo'],
            )
            return flight_data
        else:
            return flight_data

# data_manager.py

import requests
import os
from requests.auth import HTTPBasicAuth


class DataManager:
    # This class is responsible for talking to the Google Sheet.
    def __init__(self):
        self.destination_data = {}
        self.user_data = {}
        self.sheety_endpoint = os.environ['SHEETY_ENDPOINT']
        self.sheety_userendpoint = os.environ['SHEETY_USERENDPOINT']
        self.username = os.environ['USERNAME']
        self.password = os.environ['PASSWORD']

    def get_destination_data(self):
        """Gets data from price tab"""
        basic = HTTPBasicAuth(self.username, self.password)
        response = requests.get(
            url=self.sheety_endpoint,
            auth=basic)
        response.raise_for_status()
        data = response.json()
        self.destination_data = data["prices"]
        return self.destination_data

    def update_destination_codes(self):
        """Fills in destination code if not already included"""
        for city in self.destination_data:
            new_data = {
                "price": {
                    "iataCode": city['iataCode']
                }
            }
            basic = HTTPBasicAuth(self.username, self.password)
            response = requests.put(
                url=f"{self.sheety_endpoint}/{city['id']}",
                json=new_data,
                auth=basic,
            )
            response.raise_for_status()

    def add_new_user(self, first_name, last_name, email):
        """Adds a new user to the Google Sheet"""
        basic = HTTPBasicAuth(self.username, self.password)
        user_data = {
            "user": {
                "firstName": first_name,
                "lastName": last_name,
                "email": email,
            }
        }
        response = requests.post(
            url=self.sheety_userendpoint,
            json=user_data,
            auth=basic
        )
        response.raise_for_status()

    def get_user_data(self):
        """Gets user info"""
        basic = HTTPBasicAuth(self.username, self.password)
        response = requests.get(
            url=self.sheety_userendpoint,
            auth=basic)
        response.raise_for_status()
        data = response.json()
        self.user_data = data["users"]
        return self.user_data

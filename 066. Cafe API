# main.py

from flask import Flask, jsonify, render_template, request
from flask_sqlalchemy import SQLAlchemy
import random

app = Flask(__name__)

# Connect to Database
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///cafes.db'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
app.config['SECRET_KEY'] = "test"
db = SQLAlchemy(app)


# Cafe TABLE Configuration
class Cafe(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(250), unique=True, nullable=False)
    map_url = db.Column(db.String(500), nullable=False)
    img_url = db.Column(db.String(500), nullable=False)
    location = db.Column(db.String(250), nullable=False)
    seats = db.Column(db.String(250), nullable=False)
    has_toilet = db.Column(db.Boolean, nullable=False)
    has_wifi = db.Column(db.Boolean, nullable=False)
    has_sockets = db.Column(db.Boolean, nullable=False)
    can_take_calls = db.Column(db.Boolean, nullable=False)
    coffee_price = db.Column(db.String(250), nullable=True)


@app.route("/")
def home():
    return render_template("index.html")


@app.route("/search")
def search_for_cafe():
    location = request.args.get("loc")
    cafes = db.session.query(Cafe).filter_by(location=location).all()
    if cafes:
        all_cafes = []
        for cafe in cafes:
            current_cafe = {}
            for column in cafe.__table__.columns:
                current_cafe[column.name] = getattr(cafe, column.name)
            all_cafes.append(current_cafe)
        return jsonify(cafes=all_cafes)
    else:
        return jsonify(error={"Not found": "Sorry, no cafes found in selected area."})


@app.route("/all")
def get_all_cafes():
    cafes = db.session.query(Cafe).all()
    print(cafes)
    all_cafes = []
    for cafe in cafes:
        current_cafe = {}
        for column in cafe.__table__.columns:
            current_cafe[column.name] = getattr(cafe, column.name)
        all_cafes.append(current_cafe)
    return jsonify(cafes=all_cafes)


@app.route("/add", methods=["POST"])
def post_new_cafe():
    new_cafe = Cafe(
        name=request.args.get("name"),
        map_url=request.args.get("map_url"),
        img_url=request.args.get("img_url"),
        location=request.args.get("location"),
        has_sockets=bool(request.args.get("has_sockets")),
        has_toilet=bool(request.args.get("has_toilet")),
        has_wifi=bool(request.args.get("has_wifi")),
        can_take_calls=bool(request.args.get("can_take_calls")),
        seats=request.args.get("seats"),
        coffee_price=request.args.get("coffee_price"),
    )
    db.session.add(new_cafe)
    db.session.commit()
    return jsonify(response={"success": "Successfully added the new cafe."})


@app.route("/report_closed/<cafe_id>", methods=['DELETE'])
def report_closed(cafe_id):
    if request.args.get("api_key") == app.config['SECRET_KEY']:
        with app.app_context():
            cafe_to_delete = db.session.execute(db.select(Cafe).where(Cafe.id == cafe_id)).scalar()
            if not cafe_to_delete:
                return jsonify(response={"Not found": "Sorry, cafe not found."}), 404
            else:
                db.session.delete(cafe_to_delete)
                db.session.commit()
                return jsonify(response={"Success": "Successfully deleted the cafe."}), 200
    else:
        return jsonify(response={"Incorrect Key": "Sorry, that's not allowed. Make sure you have the correct API"
                                                  " key."}), 403


@app.route("/update-price/<cafe_id>", methods=['PATCH'])
def update_price(cafe_id):
    with app.app_context():
        cafe_to_update = db.session.execute(db.select(Cafe).where(Cafe.id == cafe_id)).scalar()
        if not cafe_to_update:
            return jsonify(response={"error": "Sorry, cafe not found."}), 404
        else:
            cafe_to_update.coffee_price = request.args.get("new_price")
            db.session.commit()
            return jsonify(response={"success": "Successfully updated the price."}), 200


@app.route("/random")
def get_random_cafe():
    cafes = db.session.query(Cafe).all()
    random_cafe = random.choice(cafes)
    return jsonify(
        can_take_calls=random_cafe.can_take_calls,
        coffee_price=random_cafe.coffee_price,
        has_sockets=random_cafe.has_sockets,
        has_toilet=random_cafe.has_toilet,
        has_wifi=random_cafe.has_wifi,
        id=random_cafe.id,
        img_url=random_cafe.img_url,
        location=random_cafe.location,
        map_url=random_cafe.map_url,
        name=random_cafe.name,
        seats=random_cafe.seats
    )


## HTTP GET - Read Record

## HTTP POST - Create Record

## HTTP PUT/PATCH - Update Record

## HTTP DELETE - Delete Record


if __name__ == '__main__':
    app.run(debug=True)


# index.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Cafe&Wifi API</title>
</head>
<body>
    <h1>Welcome to the Cafe & Wifi API</h1>
    <a href="https://documenter.getpostman.com/view/28288171/2s93zCXztf">Cafe API Documentation</a>
</body>
</html>
